<h3>Runtime parameters:</h3>The object Main is the point of entry for the program. It reads various parameters for the tagging experiment, such as the language, corpus, tagging algorithm to be used etc.. from a properties file whose path is passed as an argument to the program. An example properties file called runtimeSettings.properties is included. This is the file used by default, and you may use this as a template.<br><br><br><h3>Directory structure for data files:</h3>Please set DATA_DIR = "/home/vvasuki/posTagging/data/" as appropriate in your runtimeSettings.properties file, and see comments in the provided template runtimeSettings.properties about the expected directory structure.<br><h3>Files/ functions to be fixed:</h3>LabelPropogationTagger.scala, which implements the "tagging by label propagation" idea, has methods to use training and test data. Some documentation is included. Especially, the lines after JuntoRunner(graph, 1.0, .01, .01, 50, false) in the method predict() yield unanticipated output.<br><br><h3>Extra function added to Vertex.java in junto:</h3>//&nbsp; Return the estimated label with the highest score.<br>//&nbsp; Confidence in correctness: Low.<br>//&nbsp; Reason: proved correct, but estimated_labels_ seems to have NaN scores.<br>//&nbsp; Assumption: estimated_labels_ has atleast one tag with score &gt;= 0.<br>//&nbsp; Claim: bestLabel is the label with the maximal score.<br>&nbsp;
public String getEstimatedLabelBest(){<br>&nbsp;&nbsp;&nbsp;&nbsp; String[] labels = estimated_labels_.keys(new String[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp; if(labels.length == 0) throw new NullPointerException();<br>&nbsp;&nbsp;&nbsp;&nbsp; String bestLabel = "";<br>&nbsp;&nbsp;&nbsp;&nbsp; double bestScore = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp; for(int i=0; i&lt; labels.length; i++){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double score = estimated_labels_.get(labels[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(score &gt; bestScore) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bestScore = score;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bestLabel = labels[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp; return bestLabel;<br>&nbsp;}<br><br><br><br>